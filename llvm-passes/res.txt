=================================================
BuildInstructionTree: static analysis results
=================================================
FUNCTION             INSTRUCTION
-------------------------------------------------
-------------------------------------------------
└── ;   %retval = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   %argc.addr = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   %argv.addr = alloca ptr, align 8
-------------------------------------------------
-------------------------------------------------
└── ;   %arr = alloca ptr, align 8
-------------------------------------------------
-------------------------------------------------
└── ;   %isEven = alloca i8, align 1
-------------------------------------------------
-------------------------------------------------
└── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   %k = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   store i32 0, ptr %retval, align 4
    └── ;   %retval = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   store i32 %argc, ptr %argc.addr, align 4
    └── ;   %argc.addr = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   call void @llvm.dbg.declare(metadata ptr %argc.addr, metadata !18, metadata !DIExpression()), !dbg !19
-------------------------------------------------
-------------------------------------------------
└── ;   store ptr %argv, ptr %argv.addr, align 8
    └── ;   %argv.addr = alloca ptr, align 8
-------------------------------------------------
-------------------------------------------------
└── ;   call void @llvm.dbg.declare(metadata ptr %argv.addr, metadata !20, metadata !DIExpression()), !dbg !21
-------------------------------------------------
-------------------------------------------------
└── ;   call void @llvm.dbg.declare(metadata ptr %arr, metadata !22, metadata !DIExpression()), !dbg !24
-------------------------------------------------
-------------------------------------------------
└── ;   %call = call noalias ptr @malloc(i64 noundef 40) #3, !dbg !25
-------------------------------------------------
-------------------------------------------------
└── ;   store ptr %call, ptr %arr, align 8, !dbg !24
    ├── ;   %call = call noalias ptr @malloc(i64 noundef 40) #3, !dbg !25
    └── ;   %arr = alloca ptr, align 8
-------------------------------------------------
-------------------------------------------------
└── ;   call void @llvm.dbg.declare(metadata ptr %isEven, metadata !26, metadata !DIExpression()), !dbg !28
-------------------------------------------------
-------------------------------------------------
└── ;   call void @llvm.dbg.declare(metadata ptr %i, metadata !29, metadata !DIExpression()), !dbg !31
-------------------------------------------------
-------------------------------------------------
└── ;   store i32 0, ptr %i, align 4, !dbg !31
    └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   br label %for.cond, !dbg !32
-------------------------------------------------
-------------------------------------------------
└── ;   %0 = load i32, ptr %i, align 4, !dbg !33
    └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   %cmp = icmp slt i32 %0, 20, !dbg !35
    └── ;   %0 = load i32, ptr %i, align 4, !dbg !33
        └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   br i1 %cmp, label %for.body, label %for.end, !dbg !36
    └── ;   %cmp = icmp slt i32 %0, 20, !dbg !35
        └── ;   %0 = load i32, ptr %i, align 4, !dbg !33
            └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   call void @llvm.dbg.declare(metadata ptr %k, metadata !37, metadata !DIExpression()), !dbg !39
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   store i32 0, ptr %k, align 4, !dbg !39
    └── ;   %k = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   %1 = load i32, ptr %i, align 4, !dbg !40
    └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   %cmp1 = icmp sge i32 %1, 10, !dbg !42
    └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   %1 = load i32, ptr %i, align 4, !dbg !40
        └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   br i1 %cmp1, label %if.then, label %if.end, !dbg !43
    └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   %cmp1 = icmp sge i32 %1, 10, !dbg !42
        └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   %1 = load i32, ptr %i, align 4, !dbg !40
            └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (  %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   store i32 10, ptr %k, align 4, !dbg !44
    └── ;   %k = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (  %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   br label %if.end, !dbg !46
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %2 = load i32, ptr %k, align 4, !dbg !47
    └── ;   %k = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %3 = load ptr, ptr %arr, align 8, !dbg !48
    └── ;   %arr = alloca ptr, align 8
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %4 = load i32, ptr %k, align 4, !dbg !49
    └── ;   %k = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %idxprom = sext i32 %4 to i64, !dbg !48
    └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %4 = load i32, ptr %k, align 4, !dbg !49
        └── ;   %k = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %arrayidx = getelementptr inbounds i32, ptr %3, i64 %idxprom, !dbg !48
    ├──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %3 = load ptr, ptr %arr, align 8, !dbg !48
    │   └── ;   %arr = alloca ptr, align 8
    └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %idxprom = sext i32 %4 to i64, !dbg !48
        └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %4 = load i32, ptr %k, align 4, !dbg !49
            └── ;   %k = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   store i32 %2, ptr %arrayidx, align 4, !dbg !50
    ├──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %2 = load i32, ptr %k, align 4, !dbg !47
    │   └── ;   %k = alloca i32, align 4
    └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %arrayidx = getelementptr inbounds i32, ptr %3, i64 %idxprom, !dbg !48
        ├──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %3 = load ptr, ptr %arr, align 8, !dbg !48
        │   └── ;   %arr = alloca ptr, align 8
        └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %idxprom = sext i32 %4 to i64, !dbg !48
            └──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   %4 = load i32, ptr %k, align 4, !dbg !49
                └── ;   %k = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└──  (  %cmp = icmp slt i32 %0, 20, !dbg !35  )  (not   %cmp1 = icmp sge i32 %1, 10, !dbg !42  ) ;   br label %for.inc, !dbg !51
-------------------------------------------------
-------------------------------------------------
└── ;   %5 = load i32, ptr %i, align 4, !dbg !52
    └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   %inc = add nsw i32 %5, 1, !dbg !52
    └── ;   %5 = load i32, ptr %i, align 4, !dbg !52
        └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   store i32 %inc, ptr %i, align 4, !dbg !52
    ├── ;   %inc = add nsw i32 %5, 1, !dbg !52
    │   └── ;   %5 = load i32, ptr %i, align 4, !dbg !52
    │       └── ;   %i = alloca i32, align 4
    └── ;   %i = alloca i32, align 4
-------------------------------------------------
-------------------------------------------------
└── ;   br label %for.cond, !dbg !53, !llvm.loop !54
-------------------------------------------------
-------------------------------------------------
└──  (not   %cmp = icmp slt i32 %0, 20, !dbg !35  ) ;   ret i32 0, !dbg !57
-------------------------------------------------
